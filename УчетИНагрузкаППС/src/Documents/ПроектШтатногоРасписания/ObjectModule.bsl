#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.ПередЗаписьюОбъекта(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

	КоличествоЧасовИтого = Нагрузка.Итог("КоличествоЧасов");

 	ПроверитьВозможностьЗаписиДокумента(Отказ, РежимЗаписи);
 	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
		
	ПроверитьПревышениеЧасов(Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьНаДублиСтрок(Отказ);
	ПроверитьНаличиеЗаписейПредыдущейРедакции(Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Нагрузка.Очистить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьНаДублиСтрок(Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Таблица.ВидЗаписи,
	|	Таблица.Преподаватель,
	|	Таблица.Должность,
	|	Таблица.ВидЗанятости,
	|	Таблица.УченаяСтепень
	|ПОМЕСТИТЬ Нагрузка
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Нагрузка.Преподаватель КАК Преподаватель,
	|	Нагрузка.Преподаватель.Наименование КАК ПреподавательНаименование,
	|	Нагрузка.Должность,
	|	Нагрузка.Должность.Наименование КАК ДолжностьНаименование,
	|	Нагрузка.ВидЗанятости,
	|	ВЫБОР
	|		КОГДА Нагрузка.Преподаватель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Нагрузка.УченаяСтепень
	|	КОНЕЦ КАК УченаяСтепень
	|ИЗ
	|	Нагрузка КАК Нагрузка
	|ГДЕ
	|	Нагрузка.ВидЗаписи.УчетДолжностей
	|СГРУППИРОВАТЬ ПО
	|	Нагрузка.Должность,
	|	Нагрузка.ВидЗанятости,
	|	Нагрузка.Преподаватель,
	|	Нагрузка.Преподаватель.Наименование,
	|	Нагрузка.Должность.Наименование,
	|	ВЫБОР
	|		КОГДА Нагрузка.Преподаватель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА Нагрузка.УченаяСтепень
	|	КОНЕЦ
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1");
	
	Таблица = Нагрузка.Выгрузить(, "НомерСтроки, ВидЗаписи, Преподаватель, Должность, ВидЗанятости, УченаяСтепень");
	Запрос.УстановитьПараметр("Таблица", Таблица);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Преподаватель) Тогда
				ТекстОшибки = СтрШаблон("По преподователю %1 должна быть только одна строка с видом занятости %2 и должностью %3", 
					Выборка.ПреподавательНаименование, Выборка.ВидЗанятости, Выборка.ДолжностьНаименование);
			Иначе
				ТекстОшибки = СтрШаблон("По вакансии %1, %2 должна быть только одна строка с видом занятости %3", 
					Выборка.ДолжностьНаименование, Выборка.УченаяСтепень, Выборка.ВидЗанятости);				
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "ТаблицаНагрузки",, Отказ);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьЗаписиДокумента(Отказ, РежимЗаписи)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;		
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТекстОшибки = НСтр("ru='Нельзя провести документ, т.к. существует более актуальный документ %1!'");
	Иначе
		ТекстОшибки = НСтр("ru='Нельзя отменить проведение документа, т.к. существует более актуальный документ %1!'");
	КонецЕсли;
	
	ДействующаяРедакцияПроекта = Документы.ПроектШтатногоРасписания.НайтиДокумент(Дата(1, 1, 1), УчебныйГод, Подразделение);
	Если ЗначениеЗаполнено(ДействующаяРедакцияПроекта)
	И Не ДействующаяРедакцияПроекта = Ссылка
	И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействующаяРедакцияПроекта, "Дата") >= Дата Тогда
		ТекстОшибки = СтрШаблон(ТекстОшибки, ДействующаяРедакцияПроекта);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьНаличиеЗаписейПредыдущейРедакции(Отказ) 

	Если Первичный Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	ПараметрыПолучения = ШтатноеРасписание.ПараметрыПолученияШтатногоРасписания();
	ПараметрыПолучения.Дата = Дата;
	ПараметрыПолучения.УчебныйГод = УчебныйГод;
	ПараметрыПолучения.Подразделение = Подразделение;
	ПараметрыПолучения.ИсключаемыйДокумент = Ссылка;
		
	ШтатноеРасписание.СоздатьВТДанныеШтатногоРасписанияПоПараметрам(ПараметрыПолучения, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.УстановитьПараметр("ТаблицаНагрузки", Нагрузка.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаНагрузки.Должность,
	|	ТаблицаНагрузки.ВидЗанятости,
	|	ТаблицаНагрузки.УченаяСтепень,
	|	ТаблицаНагрузки.ВидЗаписи,
	|	ТаблицаНагрузки.ЗапретИзменения
	|ПОМЕСТИТЬ ВТНагрузкаДокумента
	|ИЗ
	|	&ТаблицаНагрузки КАК ТаблицаНагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеШтатногоРасписания.Должность,
	|		ДанныеШтатногоРасписания.ВидЗанятости,
	|		ДанныеШтатногоРасписания.УченаяСтепень,
	|		ДанныеШтатногоРасписания.ВидЗаписи,
	|		1 КАК Количество
	|	ИЗ
	|		ВТДанныеШтатногоРасписания КАК ДанныеШтатногоРасписания
	|	ГДЕ
	|		ДанныеШтатногоРасписания.ВидЗаписи.УчетДолжностей
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НагрузкаДокумента.Должность,
	|		НагрузкаДокумента.ВидЗанятости,
	|		НагрузкаДокумента.УченаяСтепень,
	|		НагрузкаДокумента.ВидЗаписи,
	|		-1
	|	ИЗ
	|		ВТНагрузкаДокумента КАК НагрузкаДокумента
	|	ГДЕ
	|		НагрузкаДокумента.ЗапретИзменения
	|		И НагрузкаДокумента.ВидЗаписи.УчетДолжностей) КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Должность,
	|	ВложенныйЗапрос.ВидЗанятости,
	|	ВложенныйЗапрос.УченаяСтепень,
	|	ВложенныйЗапрос.ВидЗаписи
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) <> 0";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ТекстОшибки = "Найдены расхождения с предыдущей редакцией документа, необходимо перезаполнить штатное расписание";
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);	
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПревышениеЧасов(Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектШтатногоРасписанияНагрузка.Преподаватель
	|ПОМЕСТИТЬ ВТПреподавателиПочасовки
	|ИЗ
	|	Документ.ПроектШтатногоРасписания.Нагрузка КАК ПроектШтатногоРасписанияНагрузка
	|ГДЕ
	|	ПроектШтатногоРасписанияНагрузка.Ссылка = &Ссылка
	|	И Не ПроектШтатногоРасписанияНагрузка.Преподаватель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И ПроектШтатногоРасписанияНагрузка.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Почасовое)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтатноеРасписаниеСрезПоследних.Преподаватель,
	|	СУММА(ШтатноеРасписаниеСрезПоследних.КоличествоЧасов) КАК КоличествоЧасов
	|ПОМЕСТИТЬ ВТЧасыПреподавателейПочасовиков
	|ИЗ
	|	РегистрСведений.ШтатноеРасписание.СрезПоследних(, УчебныйГод = &УчебныйГод
	|	И ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Почасовое)
	|	И Преподаватель В
	|		(ВЫБРАТЬ
	|			Т.Преподаватель
	|		ИЗ
	|			ВТПреподавателиПочасовки КАК Т)) КАК ШтатноеРасписаниеСрезПоследних
	|СГРУППИРОВАТЬ ПО
	|	ШтатноеРасписаниеСрезПоследних.Преподаватель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЧасыПреподавателейПочасовиков.Преподаватель.Наименование КАК ФИО,
	|	ВТЧасыПреподавателейПочасовиков.КоличествоЧасов - НормаУчебнойНагрузкиПочасовиковСрезПоследних.КоличествоЧасов КАК
	|		КоличествоЧасовПревышение,
	|	НормаУчебнойНагрузкиПочасовиковСрезПоследних.КоличествоЧасов КАК КоличествоЧасовНорма
	|ИЗ
	|	ВТЧасыПреподавателейПочасовиков КАК ВТЧасыПреподавателейПочасовиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормаУчебнойНагрузкиПочасовиков.СрезПоследних(&Дата,) КАК
	|			НормаУчебнойНагрузкиПочасовиковСрезПоследних
	|		ПО ВТЧасыПреподавателейПочасовиков.КоличествоЧасов > НормаУчебнойНагрузкиПочасовиковСрезПоследних.КоличествоЧасов");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("УчебныйГод", УчебныйГод);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонТекстаОшибки = "У преподавателя %1 превышение часов на %2 ч. по почасовой оплате по всем кафедрам (норма %3 ч.)";
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, 
			Выборка.ФИО, 
			Формат(Выборка.КоличествоЧасовПревышение, "ЧГ="),
			Формат(Выборка.КоличествоЧасовНорма, "ЧГ="));
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли