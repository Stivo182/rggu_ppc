#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь(); 		
	КонецЕсли;
		
	УстановитьУсловноеОформление();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьТаблицуНагрузки();
	РаскрытьДеревоТаблицыНагрузки();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПоместитьНагрузкуВОбъект();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
КонецПроцедуры

&НаКлиенте
Процедура УчебныйГодПриИзменении(Элемент)
	ЗаполнитьНагрузкуИСтавкуДоИзменения();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ЗаполнитьНагрузкуИСтавкуДоИзменения();
КонецПроцедуры

&НаКлиенте
Процедура ПервичныйПриИзменении(Элемент)
	ЗаполнитьНагрузкуИСтавкуДоИзменения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНагрузки

&НаКлиенте
Процедура ТаблицаНагрузкиПередУдалением(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаНагрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;

	ДанныеСтроки = Элемент.ТекущиеДанные;	
	НоваяСтрока = Неопределено;
	Если Копирование Тогда	
		НоваяСтрока = КоппироватьСтрокуТаблицыНагрузки(ДанныеСтроки);
	Иначе
		НоваяСтрока = ДобавитьСтрокуТаблицыНагрузки(ДанныеСтроки);	
	КонецЕсли;
	
	Если Не НоваяСтрока = Неопределено Тогда
		ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
		ПерейтиВРежимРедактированияСтроки(НоваяСтрока);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНагрузкиПреподавательПриИзменении(Элемент)
	ЗаполнитьНагрузкуИСтавкуДоИзменения();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНагрузкиДолжностьПриИзменении(Элемент)
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНагрузкиУченаяСтепеньПриИзменении(Элемент)
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПреподавателя(Команда)
	
	ДанныеСтроки = Элементы.ТаблицаНагрузки.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаДату", Объект.Дата);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	
	Если Не ДанныеСтроки = Неопределено Тогда
		ПараметрыФормы.Вставить("ВидЗанятости", ДанныеСтроки.ВидЗанятости);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавлениеСтрокиПослеВыбораПреподавателя", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаВыбораСотрудника", ПараметрыФормы, ЭтотОбъект, 
		УникальныйИдентификатор,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВакансию(Команда)
	НоваяСтрока = ДобавитьСтрокуТаблицыНагрузкиВТекущуюГруппу();
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
	Модифицированность = Истина;
	ПерейтиВРежимРедактированияСтроки(НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСотрудниками(Команда)
	ЗаполнитьСотрудникамиНаСервере();
	ЗаполнитьТаблицуНагрузки();
	РаскрытьДеревоТаблицыНагрузки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШтатнымРасписанием(Команда)
	ЗаполнитьШтатнымРасписаниемНаСервере();
	ЗаполнитьТаблицуНагрузки();
	РаскрытьДеревоТаблицыНагрузки();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавлениеСтрокиПослеВыбораПреподавателя(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НоваяСтрока = ДобавитьСтрокуТаблицыНагрузкиВТекущуюГруппу();
	НоваяСтрока.Преподаватель = Результат.Сотрудник;
	НоваяСтрока.Должность = Результат.Должность;
	НоваяСтрока.КоличествоСтавок = Результат.КоличествоСтавок;
	НоваяСтрока.УченоеЗвание = Результат.УченоеЗвание;
	НоваяСтрока.УченаяСтепень = Результат.УченаяСтепень;
	
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
	
	Модифицированность = Истина;
		
	ПерейтиКСтроке(НоваяСтрока);	
	
КонецПроцедуры

&НаСервере
Функция ПреподавателиВОбъекте()
	
	МассивПреподавателей = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Нагрузка, "Преподаватель", Истина);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивПреподавателей, Справочники.ФизическиеЛица.ПустаяСсылка());

	Возврат МассивПреподавателей;

КонецФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НастроитьСкрытиеВидовЗанятостиДляДетальныхСтрокНагрузки();
	НастроитьСкрытиеПреподавателейДляГрупповыхСтрокНагрузки();
	НастроитьОтображениеТекстаВакансияЕслиПреподавательНеУказан();
	НастроитьЗапретДоступностиККолонокамДляГрупповыхСтрок();
	НастроитьОтметкуНезаполненногоДолжности();
	НастроитьОтметкуНезаполненногоКоличестваСтавок();
	НастроитьОтметкуНезаполненногоКоличестваЧасов();
				
КонецПроцедуры

&НаСервере
Процедура НастроитьСкрытиеВидовЗанятостиДляДетальныхСтрокНагрузки()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиВидЗанятости");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСкрытиеПреподавателейДляГрупповыхСтрокНагрузки()
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиПреподаватель");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеТекстаВакансияЕслиПреподавательНеУказан()

	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиПреподаватель");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Вакансия");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WindowsЦвета.ТекстНедоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.Преподаватель",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьЗапретДоступностиККолонокамДляГрупповыхСтрок()

	// Запрет доступности к колонкам у строки, которая является группой 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиДолжность");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиУченаяСтепень");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиУченоеЗвание");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоЧасов");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоСтавок");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоЧасовДоИзменения");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоСтавокДоИзменения");
						
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Истина);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтметкуНезаполненногоДолжности()
		
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиДолжность");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.Должность",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьОтметкуНезаполненногоКоличестваСтавок()
		
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоСтавок");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.КоличествоСтавок",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьОтметкуНезаполненногоКоличестваЧасов()
		
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоЧасов");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.КоличествоЧасов",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСТаблицейНагрузки

&НаКлиенте
Процедура РаскрытьДеревоТаблицыНагрузки()
	Для Каждого СтрокаТаблицы Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл
		Элементы.ТаблицаНагрузки.Развернуть(СтрокаТаблицы.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуНагрузки()
	
	ЭлементыДерева = ТаблицаНагрузки.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();

	ДобавитьГруппировкуТаблицыНагрузки(ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Основное"));
	ДобавитьГруппировкуТаблицыНагрузки(ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнешнееСовместительство"));
	ДобавитьГруппировкуТаблицыНагрузки(ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство"));
	ДобавитьГруппировкуТаблицыНагрузки(ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Почасовое"));

	ПрочитатьНагрузкуИзОбъекта();
	
	ЗаполнитьДополнительныеКолонкиТаблицыНагрузки();
			
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеКолонкиТаблицыНагрузки()
	
	ЗаполнитьНагрузкуИСтавкуДоИзменения();	
	ЗаполнитьНормуУчебнойНагрузки();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьНагрузкуИзОбъекта()
	
	СтрокиГруппировок = СтрокиГруппировокПоВидамЗанятости();
	
	Для Каждого СтрокаТаблицы Из Объект.Нагрузка Цикл
		
		СтрокаРодителя = СтрокиГруппировок.Получить(СтрокаТаблицы.ВидЗанятости); 
		Если СтрокаРодителя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ДобавитьСтрокуТаблицыНагрузки(СтрокаРодителя);
		НоваяСтрока.Преподаватель = СтрокаТаблицы.Преподаватель;
		НоваяСтрока.Должность = СтрокаТаблицы.Должность;
		НоваяСтрока.УченаяСтепень = СтрокаТаблицы.УченаяСтепень;		
		НоваяСтрока.УченоеЗвание = СтрокаТаблицы.УченоеЗвание;
		НоваяСтрока.КоличествоСтавок = СтрокаТаблицы.КоличествоСтавок;
		НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
			
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНагрузкуВОбъект()
	
	Объект.Нагрузка.Очистить();
	
	Для Каждого СтрокаРодитель Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл		
		Для Каждого СтрокаТаблицы Из СтрокаРодитель.ПолучитьЭлементы() Цикл			
			НоваяСтрока = Объект.Нагрузка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция СтрокиГруппировокПоВидамЗанятости()

	Соответствие = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл
		Соответствие.Вставить(СтрокаТаблицы.ВидЗанятости, СтрокаТаблицы);		
	КонецЦикла;
	
	Возврат Соответствие;

КонецФункции

&НаКлиенте
Функция ДобавитьГруппировкуТаблицыНагрузки(ВидЗанятости)
	
	ЭлементыДерева = ТаблицаНагрузки.ПолучитьЭлементы();
	
	СтрокаТаблицы = ЭлементыДерева.Добавить();
	СтрокаТаблицы.ВидЗанятости = ВидЗанятости;
	СтрокаТаблицы.ЭтоГруппа = Истина;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуТаблицыНагрузки(Родитель)
	
	Если Родитель = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭлементыДерева = Родитель.ПолучитьЭлементы();
	
	СтрокаТаблицы = ЭлементыДерева.Добавить();
	СтрокаТаблицы.ВидЗанятости = Родитель.ВидЗанятости;
	СтрокаТаблицы.ЭтоГруппа = Ложь;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуТаблицыНагрузкиВТекущуюГруппу()
	
	Родитель = Элементы.ТаблицаНагрузки.ТекущиеДанные;
	Если Родитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Родитель.ЭтоГруппа Тогда
		Родитель = Родитель.ПолучитьРодителя();	
	КонецЕсли;
	
	Возврат ДобавитьСтрокуТаблицыНагрузки(Родитель);

КонецФункции

&НаКлиенте
Функция КоппироватьСтрокуТаблицыНагрузки(КоппируемаяСтрока)
	
	Если КоппируемаяСтрока.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;

	НоваяСтрока = ДобавитьСтрокуТаблицыНагрузки(КоппируемаяСтрока.ПолучитьРодителя());
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КоппируемаяСтрока);
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ПерейтиВРежимРедактированияСтроки(СтрокаТаблицы)
	
	Если Не СтрокаТаблицы = Неопределено Тогда
		Элементы.ТаблицаНагрузки.ТекущийЭлемент = Элементы.ТаблицаНагрузкиДолжность;
		ПерейтиКСтроке(СтрокаТаблицы);
		Элементы.ТаблицаНагрузки.ИзменитьСтроку();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтроке(СтрокаТаблицы)
	
	Если Не СтрокаТаблицы = Неопределено Тогда
		Элементы.ТаблицаНагрузки.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНагрузкуИСтавкуДоИзменения()
	
	ОчиститьНагрузкуИСтавкуДоИзменения();
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение)
		Или Не ЗначениеЗаполнено(Объект.УчебныйГод) Тогда
		Возврат;	
	КонецЕсли;
	
	МассивПреподаватели = ПреподавателиВОбъекте();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Если Не Объект.Первичный Тогда
		ПараметрыПолучения = ШтатноеРасписание.ПараметрыПолученияШтатногоРасписания();
		ПараметрыПолучения.Дата = Объект.Дата;
		ПараметрыПолучения.УчебныйГод = Объект.УчебныйГод;
		ПараметрыПолучения.Подразделение = Объект.Подразделение;
		ПараметрыПолучения.ИсключаемыйДокумент = Объект.Ссылка;
		
		ШтатноеРасписание.СоздатьВТДанныеШтатногоРасписания(ПараметрыПолучения, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	ПараметрыПолучения = Кадры.ПараметрыПолученияКадовыхДанныхСотрудников();
	ПараметрыПолучения.Дата = Объект.Дата;
	ПараметрыПолучения.Подразделение = Объект.Подразделение;
	ПараметрыПолучения.ТолькоРаботающие = Истина;
	ПараметрыПолучения.Сотрудники = МассивПреподаватели;
	
	Кадры.СоздатьВТКадровыеДанныеСотрудников(ПараметрыПолучения, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Если Объект.Первичный Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Преподаватель,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	КадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	0 КАК КоличествоЧасов
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";		
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	ЕСТЬNULL(ШтатноеРасписание.Преподаватель, КадровыеДанныеСотрудников.Сотрудник) КАК Преподаватель,
		|	ЕСТЬNULL(ШтатноеРасписание.Должность, КадровыеДанныеСотрудников.Должность) КАК Должность,
		|	ЕСТЬNULL(ШтатноеРасписание.ВидЗанятости, КадровыеДанныеСотрудников.ВидЗанятости) КАК ВидЗанятости,
		|	ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, КадровыеДанныеСотрудников.КоличествоСтавок) КАК КоличествоСтавок,
		|	ЕСТЬNULL(ШтатноеРасписание.КоличествоЧасов, 0) КАК КоличествоЧасов
		|ИЗ
		|	ВТШтатноеРасписание КАК ШтатноеРасписание
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ШтатноеРасписание.Преподаватель = КадровыеДанныеСотрудников.Сотрудник
		|		И ШтатноеРасписание.Подразделение = КадровыеДанныеСотрудников.Подразделение
		|		И ШтатноеРасписание.Должность = КадровыеДанныеСотрудников.Должность
		|		И ШтатноеРасписание.ВидЗанятости = КадровыеДанныеСотрудников.ВидЗанятости";
	КонецЕсли;
	
	ДанныеШтатногоРасписания = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРодитель Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл		
		Для Каждого СтрокаТаблицы Из СтрокаРодитель.ПолучитьЭлементы() Цикл	
			
			Если Не (ЗначениеЗаполнено(СтрокаТаблицы.Преподаватель)
				Или ЗначениеЗаполнено(СтрокаТаблицы.Должность)) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОтбра = Новый Структура("Преподаватель, Должность, ВидЗанятости", 
				СтрокаТаблицы.Преподаватель, СтрокаТаблицы.Должность, СтрокаТаблицы.ВидЗанятости);
						
			НайденныеШР = ДанныеШтатногоРасписания.НайтиСтроки(ПараметрыОтбра);
			Если НайденныеШР.Количество() Тогда
				СтрокаТаблицы.КоличествоСтавокДоИзменения = НайденныеШР[0].КоличествоСтавок;	
				СтрокаТаблицы.КоличествоЧасовДоИзменения = НайденныеШР[0].КоличествоЧасов;	
			КонецЕсли;
					
		КонецЦикла;		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНагрузкуИСтавкуДоИзменения()	
	Для Каждого СтрокаРодитель Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл		
		Для Каждого СтрокаТаблицы Из СтрокаРодитель.ПолучитьЭлементы() Цикл	
			СтрокаТаблицы.КоличествоСтавокДоИзменения = 0;	
			СтрокаТаблицы.КоличествоЧасовДоИзменения = 0;	
		КонецЦикла;		
	КонецЦикла;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСотрудникамиНаСервере()
	
	ПараметрыПолучения = Кадры.ПараметрыПолученияКадовыхДанныхСотрудников();
	ПараметрыПолучения.Дата = Объект.Дата;
	ПараметрыПолучения.Подразделение = Объект.Подразделение;
	ПараметрыПолучения.ТолькоРаботающие = Истина;
	
	КадрвыеДанныеСотрудников = Кадры.КадрвыеДанныеСотрудников(ПараметрыПолучения);
	
	Объект.Нагрузка.Очистить();
	
	Для Каждого СтрокаТаблицы Из КадрвыеДанныеСотрудников Цикл
		НоваяСтрока = Объект.Нагрузка.Добавить();
		НоваяСтрока.Преподаватель = СтрокаТаблицы.Сотрудник;	
		НоваяСтрока.Должность = СтрокаТаблицы.Должность;
		НоваяСтрока.ВидЗанятости = СтрокаТаблицы.ВидЗанятости;
		НоваяСтрока.УченаяСтепень = СтрокаТаблицы.УченаяСтепень;
		НоваяСтрока.УченоеЗвание = СтрокаТаблицы.УченоеЗвание;
		НоваяСтрока.КоличествоСтавок = СтрокаТаблицы.КоличествоСтавок;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШтатнымРасписаниемНаСервере()
		
	ПараметрыПолучения = ШтатноеРасписание.ПараметрыПолученияШтатногоРасписания();
	ПараметрыПолучения.Дата = Объект.Дата;
	ПараметрыПолучения.УчебныйГод = Объект.УчебныйГод;
	ПараметрыПолучения.Подразделение = Объект.Подразделение;
	ПараметрыПолучения.ИсключаемыйДокумент = Объект.Ссылка;
	
	ДанныеШтатногоРасписания = ШтатноеРасписание.ДанныеШтатногоРасписания(ПараметрыПолучения);
	
	Объект.Нагрузка.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеШтатногоРасписания Цикл
		НоваяСтрока = Объект.Нагрузка.Добавить();
		НоваяСтрока.Преподаватель = СтрокаТаблицы.Преподаватель;	
		НоваяСтрока.Должность = СтрокаТаблицы.Должность;
		НоваяСтрока.ВидЗанятости = СтрокаТаблицы.ВидЗанятости;
		НоваяСтрока.УченаяСтепень = СтрокаТаблицы.УченаяСтепень;
		НоваяСтрока.УченоеЗвание = СтрокаТаблицы.УченоеЗвание;
		НоваяСтрока.КоличествоСтавок = СтрокаТаблицы.КоличествоСтавок;
		НоваяСтрока.КоличествоЧасов = СтрокаТаблицы.КоличествоЧасов;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормуУчебнойНагрузки()

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Должность,
	|	Т.УченаяСтепень
	|ПОМЕСТИТЬ ВТДолжностиИУченыеСтепени
	|ИЗ
	|	&Таблица КАК Т";
	
	Запрос.УстановитьПараметр("Таблица", ТаблицаДляПолученияНормыУчебнойНагрузки());
	
	Запрос.Выполнить();
	
	ШтатноеРасписание.СоздатьВТНормаУчебнойНагрузки(Объект.Дата, Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НормаУчебнойНагрузки.Должность,
	|	НормаУчебнойНагрузки.УченаяСтепень,
	|	НормаУчебнойНагрузки.КоличествоЧасов
	|ИЗ
	|	ВТНормаУчебнойНагрузки КАК НормаУчебнойНагрузки";
	НормаУчебнойНагрузки = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРодитель Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл		
		Для Каждого СтрокаТаблицы Из СтрокаРодитель.ПолучитьЭлементы() Цикл	
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("Должность", СтрокаТаблицы.Должность);		
			ПараметрыПоиска.Вставить("УченаяСтепень", СтрокаТаблицы.УченаяСтепень);	
				
			НайденныеСтроки = НормаУчебнойНагрузки.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() Тогда
				СтрокаТаблицы.КоличествоЧасовНорма = НайденныеСтроки[0].КоличествоЧасов;			
			КонецЕсли;		
		КонецЦикла;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаДляПолученияНормыУчебнойНагрузки()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ТаблицаЗначений.Колонки.Добавить("УченаяСтепень", Новый ОписаниеТипов("СправочникСсылка.УченыеСтепени"));
		
	Для Каждого СтрокаРодитель Из ТаблицаНагрузки.ПолучитьЭлементы() Цикл		
		Для Каждого СтрокаТаблицы Из СтрокаРодитель.ПолучитьЭлементы() Цикл			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		КонецЦикла;		
	КонецЦикла;
	
	ТаблицаЗначений.Свернуть("Должность, УченаяСтепень");
	
	Возврат ТаблицаЗначений;
	
КонецФункции

#КонецОбласти

#КонецОбласти