#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ЗаполнитьТаблицуНагрузки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНагрузки

&НаКлиенте
Процедура ТаблицаНагрузкиПередУдалением(Элемент, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки.ЭтоГруппа Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ТаблицаНагрузкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;

	ДанныеСтроки = Элемент.ТекущиеДанные;	
	НоваяСтрока = Неопределено;
	Если Копирование Тогда	
		НоваяСтрока = КоппироватьСтрокуТаблицыНагрузки(ДанныеСтроки);
	Иначе
		НоваяСтрока = ДобавитьСтрокуТаблицыНагрузки(ДанныеСтроки);	
	КонецЕсли;
	
	Если Не НоваяСтрока = Неопределено Тогда
		ПерейтиВРежимРедактированияСтроки(НоваяСтрока);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьПреподавателя(Команда)
	НоваяСтрока = ДобавитьСтрокуТаблицыНагрузкиВТекущуюГруппу();
	ПерейтиВРежимРедактированияСтроки(НоваяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВакансию(Команда)
	НоваяСтрока = ДобавитьСтрокуТаблицыНагрузкиВТекущуюГруппу();
	ПерейтиВРежимРедактированияСтроки(НоваяСтрока);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Скрытие вида занятости, если строка не является группой
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиВидЗанятости");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	
	// Скрытие преподавателя, если строка является группой
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиПреподаватель");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Истина);
	
	// Отображение текста Вакансия, если преподаватель неуказан
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиПреподаватель");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Вакансия");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WindowsЦвета.ТекстНедоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.Преподаватель",, ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	// Запрет доступности к колонкам у строки, которая является группой 
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиДолжность");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиУченаяСтепень");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиУченоеЗвание");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоЧасов");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоСтавок");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоЧасовДоИзменения");
	
	ЭлементПоля = ЭлементОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНагрузкиКоличествоСтавокДоИзменения");
						
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементОформления.Отбор, "ТаблицаНагрузки.ЭтоГруппа", Истина);
			
		
		
КонецПроцедуры

#Область РаботаСТаблицейНагрузки

&НаСервере
Процедура ЗаполнитьТаблицуНагрузки()
	
	ЭлементыДерева = ТаблицаНагрузки.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();

	ДобавитьГруппировкуТаблицыНагрузки(Перечисления.ВидыЗанятости.Основное);
	ДобавитьГруппировкуТаблицыНагрузки(Перечисления.ВидыЗанятости.ВнешнееСовместительство);
	ДобавитьГруппировкуТаблицыНагрузки(Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
	ДобавитьГруппировкуТаблицыНагрузки(Перечисления.ВидыЗанятости.Почасовое);
			
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппировкуТаблицыНагрузки(ВидЗанятости)
	
	ЭлементыДерева = ТаблицаНагрузки.ПолучитьЭлементы();
	
	СтрокаТаблицы = ЭлементыДерева.Добавить();
	СтрокаТаблицы.ВидЗанятости = ВидЗанятости;
	СтрокаТаблицы.ЭтоГруппа = Истина;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуТаблицыНагрузки(Родитель)
	
	Если Родитель = Неопределено Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ЭлементыДерева = Родитель.ПолучитьЭлементы();
	
	СтрокаТаблицы = ЭлементыДерева.Добавить();
	СтрокаТаблицы.ВидЗанятости = Родитель.ВидЗанятости;
	СтрокаТаблицы.ЭтоГруппа = Истина;
	
КонецФункции

&НаКлиенте
Функция ДобавитьСтрокуТаблицыНагрузкиВТекущуюГруппу()
	
	Родитель = Элементы.ТаблицаНагрузки.ТекущиеДанные;
	Если Родитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Родитель.ЭтоГруппа Тогда
		Родитель = Родитель.ПолучитьРодителя();	
	КонецЕсли;
	
	Возврат ДобавитьСтрокуТаблицыНагрузки(Родитель);

КонецФункции

&НаКлиенте
Функция КоппироватьСтрокуТаблицыНагрузки(КоппируемаяСтрока)
	
	Если КоппируемаяСтрока.ЭтоГруппа Тогда
		Возврат Неопределено;
	КонецЕсли;

	НоваяСтрока = ДобавитьСтрокуТаблицыНагрузки(КоппируемаяСтрока.ПолучитьРодителя());
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КоппируемаяСтрока);
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Процедура ПерейтиВРежимРедактированияСтроки(СтрокаТаблицы)
	
	Если Не СтрокаТаблицы = Неопределено Тогда
		Элементы.ТаблицаНагрузки.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();	
		Элементы.ТаблицаНагрузки.ИзменитьСтроку();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти